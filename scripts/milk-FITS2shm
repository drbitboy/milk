#!/usr/bin/env bash

NBARGS=2
pname=`echo "$0" | sed "s/\.\///g"`

VERBOSE="0"



function printHELP {
    echo "------------------------------------------------------------------------"
    echo "$(tput bold) $pname : Copy FITS files to shared memory $(tput sgr0)"
    echo "------------------------------------------------------------------------"
    echo "  Copy FITS file to shared memory"
    echo "  Writes into ./loadedSM/ what has been loaded"
    echo "  unless -f option, will not re-load unchanged files"
    echo "   "
    echo " $(tput bold)USAGE (conf name output):$(tput sgr0)"
    echo "     $0 [-hfpr] <FITS file> <shared memory stream name>"
    echo " $(tput bold)USAGE (conf name input):$(tput sgr0)"
    echo "     $0 -c [-hfpr] <shared memory stream name>"
    echo ""
    echo " $(tput bold)OPTIONS:$(tput sgr0)"
    echo "     $(tput bold)-h$(tput sgr0)           help"
    echo "     $(tput bold)-f$(tput sgr0)           force load (even if unchanged file)"
    echo "     $(tput bold)-c$(tput sgr0)           read FITS file name from ./conf/shmim.<streamname>.name.txt directory"
    echo "     $(tput bold)-p$(tput sgr0) <pref>    stream prefix"
    echo "     $(tput bold)-r$(tput sgr0)           remove / clear previous stream and associated files"
    echo ""
    echo " $(tput bold)INPUT:$(tput sgr0)"
    echo "   <FITS file>    filesystem FITS file"
    echo "   <stream>       shared memory stream name"
    echo ""
    echo " $(tput bold)EXAMPLES:$(tput sgr0)"
    echo "   $0 -f image32.fits ims10"
    echo "        Load image32.fits to stream ims10"
    echo "        -f option : force load even if image and stream have not changed"
    echo "        write \"image32.fits\" into file \"conf/shmim.ims10.name.txt"
    echo "   echo \"image102.fits\" > conf/shmim.ims10.name.txt"
    echo "   $0 -c ims10"
    echo "        Load image102.fits to stream ims10"
    echo "   $0 -c -p aol3_ ims10"
    echo "        Load image102.fits to stream aol3_ims10"
    echo ""
    echo "------------------------------------------------------------------------"
}


printHELP1 ()
{
    printf "%25s       Copy FITS files to shared memory\n" "$0"
}





EXITSTATUS=0

function checkFile {
    if [ -f $1 ]
    then
        echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] File $(tput bold)$1$(tput sgr0) found"
    else
        echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] File $(tput bold)$1$(tput sgr0) not found"
        EXITSTATUS=1
    fi
}

function checkDir {
    if [ -d $1 ]
    then
        echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Directory $(tput bold)$1$(tput sgr0) found"
    else
        echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Directory $(tput bold)$1$(tput sgr0) not found"
        EXITSTATUS=1
    fi
}







# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
    shift
    case "$arg" in
        "--help") set -- "$@" "-h" ;;
        "--help1")
            set -- "$@" "-h"
            singlelinehelp=1;
            ;;
        *)        set -- "$@" "$arg"
    esac
done


FORCE=0
READFROMCONF=0
SMPREFIX=""
CLEARSTREAM="0"

while getopts :hfcp:r FLAG; do
    case $FLAG in
        h)  #show help
            if [ "$singlelinehelp" -eq "0" ]; then
                printHELP
            else
                printHELP1
            fi
            exit
            ;;
        c) # read from conf
            READFROMCONF=1
            NBARGS=1
            ;;
        f)
            FORCE="1"
            ;;
        p)
            SMPREFIX="$OPTARG"
            ;;
        r)
            CLEARSTREAM="1"
            ;;
        \?) #unrecognized option - show help
            echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
            printHELP
            ;;
    esac
done

shift $((OPTIND-1))







if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
    if [ "$#" -ne $NBARGS ]; then
        echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
    fi
    printHELP
    exit
fi



# ======================= CHECK REQUIRED FILES =================================
if [ "$READFROMCONF" = "0" ]; then
    checkFile $1
else
    checkFile conf/shmim.$1.name.txt
fi




if [ $EXITSTATUS -eq 1 ]; then
    echo ""
    echo "$(tput setaf 1)$(tput bold) REQUIRED FILES, COMMANDS NOT FOUND: EXITING $(tput sgr0)"
    echo ""
    exit
else
    echo ""
fi









if [ "$READFROMCONF" = "0" ]; then
    FITSfname="$1"
    STREAMname="$2"
    STREAMname0="$2"
else
    STREAMname0="$1"
    STREAMname="${SMPREFIX}$1"
    FITSfname=$( cat ./conf/shmim.$1.name.txt )
fi


#
# is file a link ?
# if it is, resolve link
#
if [ -L "$FITSfname" ]; then
    flink=$( readlink -f $FITSfname )
    rm $FITSfname
    rsync -auL $flink $FITSfname
fi



echo "FITS file   : $FITSfname"
echo "stream name : $STREAMname"



mkdir -p conf
mkdir -p loadedSM



if [ "$CLEARSTREAM" = "1" ]; then # clear stream and associated files
    rm ./loadedSM/${STREAMname0}.*
    rm $MILK_SHM_DIR/${STREAMname}.im.shm
    rm /dev/shm/sem.${STREAMname}.*
    rm ./conf/shmim.${STREAMname0}.imsize.txt
    rm ./conf/shmim.${STREAMname0}.fits
fi





LOADfile="0"

# has the file changed since last request ?

cp ./loadedSM/${STREAMname0}.FITSinfo ./loadedSM/${STREAMname0}.FITSinfo.old
stat -L --format "%n %s %y" ${FITSfname} > ./loadedSM/${STREAMname0}.FITSinfo

str1=$(cat ./loadedSM/${STREAMname0}.FITSinfo.old)
str2=$(cat ./loadedSM/${STREAMname0}.FITSinfo)
if [ "$str1" = "$str2" ]; then
    if [ "$VERBOSE" = "1" ]; then
        echo "======= FITS file unchanged ========"
        echo "======= LOADfile = $LOADfile ========"
    fi
    touch ./loadedSM/${STREAMname0}.FITSsame
    rm ./loadedSM/${STREAMname0}.FITSchanged &> /dev/null
    NEW="0"
else
    if [ "$VERBOSE" = "1" ]; then
        echo "======= FITS file changed =========="
        echo "======= LOADfile = $LOADfile ========"
    fi
    rm ./loadedSM/${STREAMname0}.FITSsame &> /dev/null
    touch ./loadedSM/${STREAMname0}.FITSchanged
    NEW="1"
    LOADfile="1"
fi
rm ./loadedSM/${STREAMname0}.SMloaded.old &> /dev/null


# has shared memory changed since last request ?

cp ./loadedSM/${STREAMname0}.SMinfo ./loadedSM/${STREAMname0}.SMinfo.old
stat -L --format "%n %s %y" $MILK_SHM_DIR/${STREAMname}.im.shm > ./loadedSM/${STREAMname0}.SMinfo
str1=$(cat ./loadedSM/${STREAMname0}.SMinfo.old)
str2=$(cat ./loadedSM/${STREAMname0}.SMinfo)

if [ "$str1" = "$str2" ]; then
    if [ "$VERBOSE" = "1" ]; then
        echo "======= SM file unchanged ========"
        echo "======= LOADfile = $LOADfile ========"
    fi
    touch ./loadedSM/${STREAMname0}.SMsame
    rm ./loadedSM/${STREAMname0}.SMchanged &> /dev/null
    NEW_SM="0"
else
    if [ "$VERBOSE" = "1" ]; then
        echo "======= SM file changed =========="
        echo "======= LOADfile = $LOADfile ========"
    fi
    rm ./loadedSM/${STREAMname0}.SMsame &> /dev/null
    touch ./loadedSM/${STREAMname0}.SMchanged
    NEW_SM="1"
    LOADfile="1"
fi
rm ./loadedSM/${STREAMname0}.SMinfo.old &> /dev/null





if [ ! -f "$MILK_SHM_DIR/${STREAMname}.im.shm" ]; then
    if [ "$VERBOSE" = "1" ]; then
        echo "======= SM file missing =========="
        echo "======= LOADfile = $LOADfile ========"
    fi
    touch ./loadedSM/${STREAMname0}.missing
    LOADfile="1"
else
    rm ./loadedSM/${STREAMname0}.missing &> /dev/null
fi


if [ "$FORCE" = "1" ]; then
    if [ "$VERBOSE" = "1" ]; then
        echo "======= FORCE MODE =========="
        echo "======= LOADfile = $LOADfile ========"
    fi
    LOADfile="1"
fi


if [ "$VERBOSE" = "1" ]; then
    echo "======= LOADfile = $LOADfile ========"
fi




if [ "$LOADfile" = "1" ]; then

MILK_QUIET=1 milk -n $pname << EOF
loadfits "${FITSfname}" im
readshmim "${STREAMname}"
cpsh im "${STREAMname}"
readshmimsize ${STREAMname} "./loadedSM/${STREAMname0}.imsize"
exitCLI
EOF

    # copy imsize to conf
    cp ./loadedSM/${STREAMname0}.imsize ./conf/shmim.${STREAMname0}.imsize.txt
    # add link to conf
    rm ./conf/shmim.${STREAMname0}.fits
    ln -s ${PWD}/${FITSfname} ./conf/shmim.${STREAMname0}.fits


    # write SM stat AFTER it has been updated
    stat -L --format "%n %s %y" $MILK_SHM_DIR/${STREAMname}.im.shm > ./loadedSM/${STREAMname0}.SMinfo
    rm ./loadedSM/${STREAMname0}.kept &> /dev/null
    touch ./loadedSM/${STREAMname0}.changed

else

    touch ./loadedSM/${STREAMname0}.kept
    rm ./loadedSM/${STREAMname0}.changed &> /dev/null

fi
